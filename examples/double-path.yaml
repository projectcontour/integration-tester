# Copyright 2020 VMware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conformance-echo-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: conformance-echo-one
  template:
    metadata:
      labels:
        app.kubernetes.io/name: conformance-echo-one
    spec:
      containers:
      - name: conformance-echo
        image: agervais/ingress-conformance-echo:latest
        imagePullPolicy: Always
        env:
        - name: TEST_ID
          value: echo-one
        ports:
        - name: http-api
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /health
            port: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: conformance-echo-one
  labels:
    app.kubernetes.io/name: conformance-echo-one
spec:
  ports:
  - name: http
    port: 80
    targetPort: http-api
  selector:
    app.kubernetes.io/name: conformance-echo-one

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: conformance-echo-two
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: conformance-echo-two
  template:
    metadata:
      labels:
        app.kubernetes.io/name: conformance-echo-two
    spec:
      containers:
      - name: conformance-echo
        image: agervais/ingress-conformance-echo:latest
        imagePullPolicy: Always
        env:
        - name: TEST_ID
          value: echo-two
        ports:
        - name: http-api
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /health
            port: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: conformance-echo-two
  labels:
    app.kubernetes.io/name: conformance-echo-two
spec:
  ports:
  - name: http
    port: 80
    targetPort: http-api
  selector:
    app.kubernetes.io/name: conformance-echo-two

---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
  routes:
  - conditions:
    - prefix: /echo-one/
    services:
     - name: conformance-echo-one
       port: 80
  - conditions:
    - prefix: /echo-two/
    services:
     - name: conformance-echo-two
       port: 80

---
error[msg] {
  not data.resources.httpproxies.echo.status
  msg := "missing status"
}

error[msg] {
  p := data.resources.httpproxies.echo

  p.status.currentStatus != "valid"

  msg := sprintf("invalid status: %s", [p.status.description])
}

---
# TODO(jpeach): take this from params or the "echo" Service
ip := "127.0.0.1"

# Take a timestamp to verify the response.
stamp := time.now_ns()

testid := "echo-one"
path := sprintf("%s/path/%d", [testid, stamp])
url := sprintf("http://%s/%s", [ip, path])


response := http.send({
  "method": "GET",
  "url": url,
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": "something/test-unique",
  },
})

error[msg] {
  response.status_code != 200
  msg := sprintf("non-200 response for '%s': %s", [
    url, response.status])
}

error[msg] {
  not response.body.TestId
  msg := sprintf("missing TestId field in response body: %s", [response.body])
}

error[msg] {
  response.body.TestId != testid
  msg := sprintf("response TestId was %s, wanted /%s", [
    response.body.TestId,
    testid,
  ])
}

---
# TODO(jpeach): take this from params or the "echo" Service
ip := "127.0.0.1"

# Take a timestamp to verify the response.
stamp := time.now_ns()

testid := "echo-two"
path := sprintf("%s/path/%d", [testid, stamp])
url := sprintf("http://%s/%s", [ip, path])


response := http.send({
  "method": "GET",
  "url": url,
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": "something/test-unique",
  },
})

error[msg] {
  response.status_code != 200
  msg := sprintf("non-200 response for '%s': %s", [
    url, response.status])
}

error[msg] {
  not response.body.TestId
  msg := sprintf("missing TestId field in response body: %s", [response.body])
}

error[msg] {
  response.body.TestId != testid
  msg := sprintf("response TestId was %s, wanted /%s", [
    response.body.TestId,
    testid,
  ])
}
