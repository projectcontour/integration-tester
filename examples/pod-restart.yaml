# Copyright 2020 VMware, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.  You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress-conformance-echo
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-conformance-echo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-conformance-echo
    spec:
      containers:
      - name: ingress-conformance-echo
        image: agervais/ingress-conformance-echo:latest
        imagePullPolicy: Always
        env:
        - name: TEST_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: http-api
          containerPort: 3000
        readinessProbe:
          httpGet:
            path: /health
            port: 3000

---
apiVersion: v1
kind: Service
metadata:
  name: ingress-conformance-echo
spec:
  ports:
  - name: http
    port: 80
    targetPort: http-api
  selector:
    app.kubernetes.io/name: ingress-conformance-echo

---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: echo
spec:
  virtualhost:
    fqdn: echo.projectcontour.io
  routes:
    - conditions:
      - prefix: /
      services:
        - name: ingress-conformance-echo
          port: 80

---

runid := data.test.params["run-id"]

all_echo_pods[name] {
  data.resources.pods[_].metadata.labels["app.kubernetes.io/name"] == "ingress-conformance-echo"
  data.resources.pods[_].metadata.annotations["integration-tester/run-id"] == runid

  name := data.resources.pods[_].metadata.name
}

all_ready_pods[name] {
  some i

  # Find combinations of _ and i where the condition is Ready/True.
  cond := data.resources.pods[_].status.conditions[i]
  cond.type == "Ready"
  cond.status == "True"

  name := data.resources.pods[_].metadata.name
}

error[msg] {
  all_echo_pods[_] != all_ready_pods[_]

  msg := "echo pods failed to become ready"
}

---
ip := data.test.params["address"]

# Take a timestamp to verify the response.
stamp := time.now_ns()

url := sprintf("http://%s/path/%d", [ip, stamp])

response := http.send({
  "method": "GET",
  "url": url,
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": "something/test-unique",
  },
})

error[msg] {
  testid := response.body.TestId
  podname := data.resources.pods[_].metadata.name

  podname != testid
  msg := sprintf("podname=%s testid=%s", [
    podname, testid])
}

error[msg] {
  response.status_code != 200
  msg := sprintf("non-200 response for '%s': %s", [
    url, response.status])
}

error[msg] {
  not response.body.TestId
  msg := sprintf("missing TestId field in response body: %s", [response.body])
}

---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app.kubernetes.io/name: ingress-conformance-echo
$apply: delete

---
# TODO(jpeach): take this from params or the "echo" Service
ip := data.test.params["address"]

# Take a timestamp to verify the response.
stamp := time.now_ns()

url := sprintf("http://%s/path/%d", [ip, stamp])

response := http.send({
  "method": "GET",
  "url": url,
  "headers": {
    "Host": "echo.projectcontour.io",
    "User-Agent": "something/test-unique",
  },
})

error[msg] {
  testid := response.body.TestId
  podname := data.resources.pods[_].metadata.name

  podname != testid
  msg := sprintf("podname=%s testid=%s", [
    podname, testid])
}

error[msg] {
  response.status_code != 200
  msg := sprintf("non-200 response for '%s': %s", [
    url, response.status])
}

error[msg] {
  not response.body.TestId
  msg := sprintf("missing TestId field in response body: %s", [response.body])
}
